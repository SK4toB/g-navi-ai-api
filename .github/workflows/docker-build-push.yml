name: FastAPI Docker Build & Push

on:
    push:
        branches: [main, ci/k8s]
    pull_request:
        branches: [main]

env:
    IMAGE_REGISTRY: amdp-registry.skala-ai.com/skala25a
    IMAGE_NAME: sk-gnavi4-ai
    DOCKER_CREDENTIAL_ID: skala-image-registry-id

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        timeout-minutes: 30 # 전체 작업 타임아웃 설정

        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
      # 디스크 공간 확보 추가
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

            # Python 패키지 캐싱
            - name: Cache Python packages
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            # 의존성 설치 및 간단한 문법 체크
            - name: Install dependencies and validate
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  python -m py_compile app/main.py
              timeout-minutes: 10

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.IMAGE_REGISTRY }}
                  username: ${{ secrets.HARBOR_USERNAME }}
                  password: ${{ secrets.HARBOR_PASSWORD }}

            - name: Generate image tag
              id: generate_tag
              run: |
                  BUILD_NUMBER="${{ github.run_number }}"
                  HASH=$(date +%s%N | sha256sum | cut -c1-12)
                  FINAL_IMAGE_TAG="${BUILD_NUMBER}-${HASH}"
                  echo "FINAL_IMAGE_TAG=$FINAL_IMAGE_TAG" >> $GITHUB_ENV
                  echo "Final Tag: $FINAL_IMAGE_TAG"

      # Docker 빌드 최적화 - 멀티스테이지 빌드와 캐시 활용
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 빌드 최적화를 위한 빌드 인자
          build-args: |
            BUILDKIT_INLINE_CACHE=1
        timeout-minutes: 30

            - name: Image build success
              run: |
                  echo "Docker 이미지 빌드 및 푸시 성공"
                  echo "이미지: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}"
                  echo "Harbor에서 확인바람"

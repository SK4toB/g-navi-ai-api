name: FastAPI Docker Build & Push

on:
  push:
    branches: [main, ci/k8s]
  pull_request:
    branches: [main]

env:
  IMAGE_REGISTRY: amdp-registry.skala-ai.com/skala25a
  BASE_IMAGE_NAME: sk-gnavi4-ai-base
  APP_IMAGE_NAME: sk-gnavi4-ai
  BASE_VERSION: "1.0.0"
  DOCKER_CREDENTIAL_ID: skala-image-registry-id

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Harbor 연결 테스트
      - name: Test Harbor connection
        run: |
          echo "🔍 Harbor 연결 테스트..."
          curl -sSf -m 10 https://amdp-registry.skala-ai.com/v2/ > /dev/null
          echo "✅ Harbor 연결 성공"

      # Docker 로그인 (안정화된 버전)
      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          logout: false

      # 베이스 이미지 존재 확인
      - name: Check base image exists
        run: |
          echo "🔍 베이스 이미지 확인 중..."
          if docker manifest inspect ${{ env.IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_VERSION }} >/dev/null 2>&1; then
            echo "✅ 베이스 이미지 존재: ${{ env.BASE_VERSION }}"
          else
            echo "❌ 베이스 이미지가 없습니다!"
            echo "::error::베이스 이미지를 먼저 빌드하고 푸시해주세요"
            echo "실행: chmod +x base-build.sh base-push.sh && ./base-build.sh && ./base-push.sh"
            exit 1
          fi

      # 베이스 이미지 사전 Pull (캐싱 최적화)
      - name: Pre-pull base image for caching
        run: |
          echo "📦 베이스 이미지 사전 다운로드 중..."
          docker pull ${{ env.IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_VERSION }}
          echo "✅ 베이스 이미지 캐시 완료"

      - name: Generate image tags
        id: generate_tag
        run: |
          BUILD_NUMBER="${{ github.run_number }}"
          HASH=$(date +%s%N | sha256sum | cut -c1-12)
          FINAL_IMAGE_TAG="${BUILD_NUMBER}-${HASH}"
          
          echo "FINAL_IMAGE_TAG=$FINAL_IMAGE_TAG" >> $GITHUB_ENV
          echo "Final Tag: $FINAL_IMAGE_TAG"

      # 최적화된 애플리케이션 이미지 빌드
      - name: Build and push application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:latest
          # 다중 캐시 전략
          cache-from: |
            type=gha,scope=build-cache
            type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:latest
          cache-to: type=gha,mode=max,scope=build-cache
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BASE_IMAGE_TAG=${{ env.BASE_VERSION }}
          # 최적화 설정
          pull: false  # 이미 pull했으므로 false
          provenance: false
          sbom: false
        timeout-minutes: 20

      - name: Build success
        run: |
          echo "✅ 빌드 및 푸시 완료!"
          echo "베이스 이미지: ${{ env.IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_VERSION }}"
          echo "앱 이미지: ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}"
          echo "Harbor에서 확인바람"

      # Harbor 업로드 확인
      - name: Verify image upload
        run: |
          echo "🔍 Harbor에서 이미지 업로드 확인 중..."
          sleep 5  # Harbor 처리 대기
          
          if docker manifest inspect ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }} >/dev/null 2>&1; then
            echo "✅ 이미지 업로드 확인됨: ${{ env.FINAL_IMAGE_TAG }}"
          else
            echo "⚠️ 이미지 확인 실패 - Harbor UI에서 직접 확인하세요"
          fi

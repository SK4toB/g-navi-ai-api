name: FastAPI Docker Build & Push (Optimized)

on:
    push:
        branches: [main, ci/k8s]
    pull_request:
        branches: [main]

env:
    IMAGE_REGISTRY: amdp-registry.skala-ai.com/skala25a
    BASE_IMAGE_NAME: sk-gnavi4-ai-base
    APP_IMAGE_NAME: sk-gnavi4-ai
    BASE_VERSION: '1.0.0' # 고정 버전 사용

jobs:
    # 간소화된 빌드 프로세스
    build-and-push:
        runs-on: ubuntu-latest
        timeout-minutes: 20
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'

            # 빠른 문법 체크
            - name: Quick syntax validation
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  python -m py_compile app/main.py
              timeout-minutes: 3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Harbor 연결 테스트
            - name: Test Harbor connection
              run: |
                  echo "🔍 Harbor 연결 테스트..."
                  curl -sSf -m 10 https://amdp-registry.skala-ai.com/v2/ > /dev/null
                  echo "✅ Harbor 연결 성공"

            # Docker 로그인
            - name: Log in to Harbor Registry
              run: |
                  echo "🔐 Harbor 로그인 중..."
                  echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.IMAGE_REGISTRY }} \
                    --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
                  echo "✅ Harbor 로그인 성공"

            # 베이스 이미지 존재 확인
            - name: Check base image exists
              run: |
                  echo "🔍 베이스 이미지 확인 중..."
                  if docker manifest inspect ${{ env.IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_VERSION }} >/dev/null 2>&1; then
                    echo "✅ 베이스 이미지 존재: ${{ env.BASE_VERSION }}"
                  else
                    echo "❌ 베이스 이미지가 없습니다!"
                    echo "::error::베이스 이미지를 먼저 빌드하고 푸시해주세요"
                    echo "실행: ./base-build.sh && ./base-push.sh"
                    exit 1
                  fi

            - name: Generate image tags
              id: generate_tag
              run: |
                  BUILD_NUMBER="${{ github.run_number }}"
                  HASH=$(date +%s%N | sha256sum | cut -c1-12)
                  FINAL_IMAGE_TAG="${BUILD_NUMBER}-${HASH}"

                  echo "FINAL_IMAGE_TAG=$FINAL_IMAGE_TAG" >> $GITHUB_ENV
                  echo "Final Tag: $FINAL_IMAGE_TAG"

            # 애플리케이션 이미지 빌드
            - name: Build and push application image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  platforms: linux/amd64
                  push: true
                  tags: |
                      ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}
                      ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      BUILDKIT_INLINE_CACHE=1
                      BASE_IMAGE_TAG=${{ env.BASE_VERSION }}
              timeout-minutes: 10

            - name: Build success
              run: |
                  echo "✅ 빌드 및 푸시 완료!"
                  echo "베이스 이미지: ${{ env.IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_VERSION }}"
                  echo "앱 이미지: ${{ env.IMAGE_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.FINAL_IMAGE_TAG }}"
                  echo "Harbor에서 확인바람"
